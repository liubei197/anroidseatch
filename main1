function I(e) {
            if ("string" != typeof e)
                e = A(e);
            else if (!S(e) || e.length % 2)
                return null;
            return (e.length - 2) / 2
        }
        function O(e, t, a) {
            return ("string" != typeof e ? e = A(e) : (!S(e) || e.length % 2) && p.throwArgumentError("invalid hexData", "value", e),
            t = 2 + 2 * t,
            null != a) ? "0x" + e.substring(t, 2 + 2 * a) : "0x" + e.substring(t)
        }
        function C(e) {
            let t = "0x";
            return e.forEach(e=>{
                t += A(e).substring(2)
            }
            ),
            t
        }
        function R(e) {
            let t = P(A(e, {
                hexPad: "left"
            }));
            return "0x" === t ? "0x0" : t
        }
        function P(e) {
            "string" != typeof e && (e = A(e)),
            S(e) || p.throwArgumentError("invalid hex string", "value", e),
            e = e.substring(2);
            let t = 0;
            for (; t < e.length && "0" === e[t]; )
                t++;
            return "0x" + e.substring(t)
        }
        function T(e, t) {
            for ("string" != typeof e ? e = A(e) : S(e) || p.throwArgumentError("invalid hex string", "value", e),
            e.length > 2 * t + 2 && p.throwArgumentError("value out of range", "value", arguments[1]); e.length < 2 * t + 2; )
                e = "0x0" + e.substring(2);
            return e
        }
        function N(e) {
            let t = {
                r: "0x",
                s: "0x",
                _vs: "0x",
                recoveryParam: 0,
                v: 0,
                yParityAndS: "0x",
                compact: "0x"
            };
            if (y(e)) {
                let a = w(e);
                64 === a.length ? (t.v = 27 + (a[32] >> 7),
                a[32] &= 127,
                t.r = A(a.slice(0, 32)),
                t.s = A(a.slice(32, 64))) : 65 === a.length ? (t.r = A(a.slice(0, 32)),
                t.s = A(a.slice(32, 64)),
                t.v = a[64]) : p.throwArgumentError("invalid signature string", "signature", e),
                t.v < 27 && (0 === t.v || 1 === t.v ? t.v += 27 : p.throwArgumentError("signature invalid v byte", "signature", e)),
                t.recoveryParam = 1 - t.v % 2,
                t.recoveryParam && (a[32] |= 128),
                t._vs = A(a.slice(32, 64))
            } else {
                if (t.r = e.r,
                t.s = e.s,
                t.v = e.v,
                t.recoveryParam = e.recoveryParam,
                t._vs = e._vs,
                null != t._vs) {
                    let a = E(w(t._vs), 32);
                    t._vs = A(a);
                    let r = a[0] >= 128 ? 1 : 0;
                    null == t.recoveryParam ? t.recoveryParam = r : t.recoveryParam !== r && p.throwArgumentError("signature recoveryParam mismatch _vs", "signature", e),
                    a[0] &= 127;
                    let n = A(a);
                    null == t.s ? t.s = n : t.s !== n && p.throwArgumentError("signature v mismatch _vs", "signature", e)
                }
                if (null == t.recoveryParam)
                    null == t.v ? p.throwArgumentError("signature missing v and recoveryParam", "signature", e) : 0 === t.v || 1 === t.v ? t.recoveryParam = t.v : t.recoveryParam = 1 - t.v % 2;
                else if (null == t.v)
                    t.v = 27 + t.recoveryParam;
                else {
                    let a = 0 === t.v || 1 === t.v ? t.v : 1 - t.v % 2;
                    t.recoveryParam !== a && p.throwArgumentError("signature recoveryParam mismatch v", "signature", e)
                }
                null != t.r && S(t.r) ? t.r = T(t.r, 32) : p.throwArgumentError("signature missing or invalid r", "signature", e),
                null != t.s && S(t.s) ? t.s = T(t.s, 32) : p.throwArgumentError("signature missing or invalid s", "signature", e);
                let a = w(t.s);
                a[0] >= 128 && p.throwArgumentError("signature s out of range", "signature", e),
                t.recoveryParam && (a[0] |= 128);
                let r = A(a);
                t._vs && (S(t._vs) || p.throwArgumentError("signature invalid _vs", "signature", e),
                t._vs = T(t._vs, 32)),
                null == t._vs ? t._vs = r : t._vs !== r && p.throwArgumentError("signature _vs mismatch v and s", "signature", e)
            }
            return t.yParityAndS = t._vs,
            t.compact = t.r + t.yParityAndS.substring(2),
            t
        }
        function z(e) {
            return A(M([(e = N(e)).r, e.s, e.recoveryParam ? "0x1c" : "0x1b"]))
        }
    },
    7320: function(e, t) {
        "use strict";
        function a(e) {
            if (!Number.isSafeInteger(e) || e < 0)
                throw Error(`Wrong positive integer: ${e}`)
        }
        function r(e) {
            if ("boolean" != typeof e)
                throw Error(`Expected boolean, not ${e}`)
        }
        function n(e, ...t) {
            if (!(e instanceof Uint8Array))
                throw TypeError("Expected Uint8Array");
            if (t.length > 0 && !t.includes(e.length))
                throw TypeError(`Expected Uint8Array of length ${t}, not of length=${e.length}`)
        }
        function i(e) {
            if ("function" != typeof e || "function" != typeof e.create)
                throw Error("Hash should be wrapped by utils.wrapConstructor");
            a(e.outputLen),
            a(e.blockLen)
        }
        function c(e, t=!0) {
            if (e.destroyed)
                throw Error("Hash instance has been destroyed");
            if (t && e.finished)
                throw Error("Hash#digest() has already been called")
        }
        function f(e, t) {
            n(e);
            let a = t.outputLen;
            if (e.length < a)
                throw Error(`digestInto() expects output buffer of length at least ${a}`)
        }
        Object.defineProperty(t, "__esModule", {
            value: !0
        }),
        t.output = t.exists = t.hash = t.bytes = t.bool = t.number = void 0,
        t.number = a,
        t.bool = r,
        t.bytes = n,
        t.hash = i,
        t.exists = c,
        t.output = f,
        t.default = {
            number: a,
            bool: r,
            bytes: n,
            hash: i,
            exists: c,
            output: f
        }
    },
